{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/root.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/getAllBookmarks.tsx", "../app/utils/session.server.ts", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/login.callback.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/bookmarks.tsx", "../app/components/Footer.tsx", "../app/utils/utils.ts", "../app/svg/Logo.tsx", "../app/components/FilterButton.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/bookmarks/index.tsx", "../app/components/Tweet.tsx", "../app/routes/bookmarks.tsx", "../app/components/Select.tsx", "../app/components/Spinner.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/logout.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/index.tsx", "/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react'\n\nimport reset from '@unocss/reset/tailwind.css'\nimport unocss from '~/styles/uno.css'\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Twitter Bookmarks',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\nexport const links = () => [\n  { rel: 'stylesheet', href: reset },\n  { rel: 'stylesheet', href: unocss },\n]\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n", "import type { LoaderFunction } from '@remix-run/node'\nimport { redirect } from '@remix-run/node'\nimport { json } from '@remix-run/node'\nimport { getUser } from '~/utils/session.server'\nimport type { AllBookmarks } from './bookmarks'\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request)\n  if (!user) {\n    return redirect('/')\n  }\n  const { id, access_token } = user\n\n  // let's get all of the users bookmarks here and return them to the client to persist locally\n  // as it stands we can only get 100 at a time with a potential max of 800\n  let bookmarks: AllBookmarks = {\n    data: [],\n    includes: {\n      users: [],\n      media: [],\n    },\n  }\n\n  const getBookmarks = async (token: string) => {\n    const bookmarksUrl = new URL(\n      `https://api.twitter.com/2/users/${id}/bookmarks`\n    )\n\n    if (token) {\n      bookmarksUrl.searchParams.append('pagination_token', token)\n    }\n\n    bookmarksUrl.searchParams.append(\n      'tweet.fields',\n      'context_annotations,created_at'\n    )\n    bookmarksUrl.searchParams.append(\n      'expansions',\n      'author_id,attachments.media_keys'\n    )\n    bookmarksUrl.searchParams.append(\n      'user.fields',\n      'verified,profile_image_url'\n    )\n    bookmarksUrl.searchParams.append('media.fields', 'type,url,width,height')\n\n    const response = await fetch(bookmarksUrl.toString(), {\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${access_token}`,\n      },\n    })\n\n    const json = await response.json()\n\n    // bookmarks.data is an array so its easy peasy\n    bookmarks.data = [...bookmarks.data, ...json.data]\n    // bookmarks.includes is json so we need to do a little more fiddling\n    bookmarks.includes = {\n      ...bookmarks.includes,\n      users: [...bookmarks.includes.users, ...json.includes.users],\n      media: [...bookmarks.includes.media, ...json.includes.media],\n    }\n\n    if (json.meta.next_token) {\n      await getBookmarks(json.meta.next_token)\n    }\n\n    return\n  }\n\n  await getBookmarks('')\n\n  return json(bookmarks)\n}\n", "import { createCookieSessionStorage, redirect } from '@remix-run/node';\n\nconst sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret) {\n  throw new Error('SESSION_SECRET must be set');\n}\n\nconst sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: 'twitter_session',\n    // normally you want this to be `secure: true`\n    // but that doesn't work on localhost for Safari\n    // https://web.dev/when-to-use-local-https/\n    secure: process.env.NODE_ENV === 'production',\n    secrets: [sessionSecret],\n    sameSite: 'lax',\n    path: '/',\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true,\n  },\n});\n\ntype User = {\n  access_token: string;\n  id: string;\n  name: string;\n  username: string;\n  expires_at: string;\n};\n\nexport async function createTwitterSession(user: User, redirectTo: string) {\n  const session = await sessionStorage.getSession();\n  session.set('user', user);\n  return redirect(redirectTo, {\n    headers: {\n      'Set-Cookie': await sessionStorage.commitSession(session),\n    },\n  });\n}\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get('Cookie');\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getUser(request: Request): Promise<User | null> {\n  const session = await getSession(request);\n  const user = session.get('user');\n\n  // if there is no user return null\n  if (!user) {\n    return null;\n  }\n\n  return user;\n}\n\nexport const logout = async (request: Request) => {\n  const session = await getSession(request);\n  return redirect('/', {\n    headers: {\n      'Set-Cookie': await sessionStorage.destroySession(session),\n    },\n  });\n};\n", "import type { LoaderFunction } from '@remix-run/server-runtime'\nimport { redirect } from '@remix-run/server-runtime'\nimport { createTwitterSession } from '~/utils/session.server'\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  // grab the code we get in the callback\n  const requestUrl = new URL(request.url)\n  const code = requestUrl.searchParams.get('code')\n\n  if (!code) {\n    return redirect('/')\n  }\n  // create the params we will need;\n  const url = 'https://api.twitter.com/2/oauth2/token'\n  const params = new URLSearchParams()\n  params.append('grant_type', 'authorization_code')\n  params.append('client_id', process.env.TWITTER_CLIENT_ID as string)\n  params.append('redirect_uri', process.env.TWITTER_REDIRECT_URI as string)\n  params.append('code_verifier', 'challenge')\n  params.append('code', code)\n\n  // fetch the access token\n  const tokenResponse = await fetch(url, {\n    method: 'POST',\n    body: params,\n  })\n\n  // get the JSON\n  const tokenJSON = await tokenResponse.json()\n\n  // using the token we can now get the user\n  const userResponse = await fetch(\n    'https://api.twitter.com/2/users/me?user.fields=profile_image_url',\n    {\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json',\n        Authorization: `Bearer ${tokenJSON.access_token}`,\n      },\n    }\n  )\n\n  const { data: userJSON } = await userResponse.json()\n\n  const user = {\n    ...tokenJSON,\n    expires_at: new Date().getTime() + tokenJSON.expires_in * 1000,\n    ...userJSON,\n  }\n\n  return createTwitterSession(user, '/bookmarks')\n}\n", "import type { LoaderFunction } from '@remix-run/node'\nimport { json, redirect } from '@remix-run/node'\nimport { Link, Outlet, useLoaderData, useLocation } from '@remix-run/react'\nimport { atom, useAtom } from 'jotai'\nimport { atomWithStorage } from 'jotai/utils'\nimport { useEffect, useState } from 'react'\nimport { ClientOnly } from 'remix-utils'\nimport { Footer } from '~/components/Footer'\nimport { getUser, logout } from '~/utils/session.server'\nimport {\n  getBookmarkMonths,\n  getBookmarkYears,\n  getPopularUsers,\n  updateSearchParams,\n} from '~/utils/utils'\nimport { Logo } from '~/svg/Logo'\nimport { FilterButton } from '~/components/FilterButton'\nimport { Cross1Icon } from '@radix-ui/react-icons'\n\nexport type AllBookmarks = {\n  data: {\n    created_at: string\n    author_id: string\n  }[]\n  includes: {\n    users: any[]\n    media: any[]\n  }\n}\n\n// this is the atom we will use to store all of our bookmarks\nexport const allBookmarksAtom = atomWithStorage<AllBookmarks | null>(\n  'allBookmarks',\n  null\n)\n// this atom will store the filtered items\nexport const bookmarksAtom = atom<AllBookmarks | null>(null)\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  try {\n    const user = await getUser(request)\n\n    if (!user) {\n      return redirect('/')\n    }\n\n    // check whether the access token has expired\n    if (new Date(user.expires_at) < new Date()) {\n      return logout(request)\n    }\n\n    return json({\n      user,\n    })\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nconst getAllBookmarks = async (setAllBookmarks: any) => {\n  try {\n    const response = await fetch('/getAllBookmarks')\n    const json = await response.json()\n    setAllBookmarks(json)\n    return\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nconst Bookmarks = () => {\n  const data = useLoaderData()\n  const { user } = data\n  const { search } = useLocation()\n  const params = new URLSearchParams(search)\n\n  const query = params.get('query')\n  const yearParam = params.get('year')\n  const monthParam = params.get('month')\n  const openParam = params.get('open')\n\n  const [allBookmarks, setAllBookmarks] = useAtom<AllBookmarks | null>(\n    allBookmarksAtom\n  )\n  const [bookmarks] = useAtom<AllBookmarks | null>(bookmarksAtom)\n  const [popularUsers, setPopularUsers] = useState<string[] | null>(null)\n  const [bookmarkYears, setBookmarkYears] = useState<string[] | null>(null)\n\n  useEffect(() => {\n    if (!allBookmarks) getAllBookmarks(setAllBookmarks)\n  }, [])\n\n  useEffect(() => {\n    if (allBookmarks) {\n      // get the 10 most popular\n      let mostPopular = getPopularUsers(allBookmarks)\n      let getYears = getBookmarkYears(allBookmarks)\n      setPopularUsers(mostPopular.slice(0, 10))\n      setBookmarkYears(getYears)\n    }\n  }, [allBookmarks])\n\n  return (\n    <main>\n      <div className=\"relative bg-twitter-dark flex\">\n        <section\n          className={`bg-twitter-dark max-w-md w-full fixed z-20 top-0 left-0 bottom-0 space-y-4 bg-[url(/bg_texture.webp)] p-4 sm:p-8 pr-14 sm:pr-14 sm:translate-x-0 sm:relative sm:self-start sm:sticky sm:top-0 sm:max-w-md sm:h-screen transition-transform ${\n            openParam ? 'translate-x-0' : '-translate-x-full'\n          }`}\n        >\n          <div>\n            <div className=\"max-w-md mx-auto flex justify-between items-center h-8 sm:hidden\">\n              <Link\n                to={`/bookmarks?${updateSearchParams(search, 'open')}`}\n                className=\"text-white ml-auto\"\n              >\n                <Cross1Icon />\n              </Link>\n            </div>\n            <Link to=\"/bookmarks\" className=\"pb-4 hidden sm:block\">\n              <Logo className=\"text-white\" />\n            </Link>\n          </div>\n\n          <p className=\"text-white text-sm\">\n            Let's help you find your bookmarks quickly and easily! Use the\n            filters below or freestyle it in the search bar.\n          </p>\n          <div className=\"w-full\">\n            <Link\n              to=\"/bookmarks\"\n              className={[\n                'block text-center w-full border rounded-lg px-4 py-2 text-sm text-[#15202B] ',\n                search\n                  ? 'bg-white border-white'\n                  : 'bg-gray-500 text-gray-300 border-gray-400',\n              ].join(' ')}\n            >\n              Clear Filters\n            </Link>\n          </div>\n          <ClientOnly>\n            {() => {\n              if (popularUsers) {\n                return (\n                  <>\n                    <h3 className=\"text-white\">\n                      Your favourite bookmark authors...\n                    </h3>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {popularUsers.map((username, index) => {\n                        // create the updated query params\n                        let newParams = updateSearchParams(\n                          search,\n                          'query',\n                          username\n                        )\n\n                        newParams = updateSearchParams(newParams, 'month')\n                        newParams = updateSearchParams(newParams, 'year')\n\n                        return (\n                          <FilterButton\n                            key={username}\n                            params={newParams}\n                            active={query === username}\n                            text={`@${username}`}\n                          />\n                        )\n                      })}\n                    </div>\n                  </>\n                )\n              }\n            }}\n          </ClientOnly>\n          <ClientOnly>\n            {() => {\n              if (bookmarkYears) {\n                return (\n                  <>\n                    <h3 className=\"text-white\">Filter by year...</h3>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {bookmarkYears.map((bookmarkYear, index) => {\n                        // create the updated query params\n                        let newParams = updateSearchParams(\n                          search,\n                          'year',\n                          bookmarkYear\n                        )\n\n                        newParams = updateSearchParams(newParams, 'month')\n\n                        return (\n                          <FilterButton\n                            key={bookmarkYear}\n                            params={newParams}\n                            active={bookmarkYear.toString() === yearParam}\n                            text={bookmarkYear}\n                          />\n                        )\n                      })}\n                    </div>\n                  </>\n                )\n              }\n            }}\n          </ClientOnly>\n          <ClientOnly>\n            {() => {\n              if (bookmarkYears && bookmarks) {\n                // get all of the available months\n                const bookmarkMonths = getBookmarkMonths(bookmarks)\n\n                if (!bookmarkMonths || !bookmarkMonths.length) return null\n\n                return (\n                  <>\n                    <h3 className=\"text-white\">\n                      and optionally filter by month...\n                    </h3>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {bookmarkMonths.map((bookmarkMonth, index) => {\n                        // create the updated query params\n                        const newParams = updateSearchParams(\n                          search,\n                          'month',\n                          bookmarkMonth as string\n                        )\n\n                        return (\n                          <FilterButton\n                            key={bookmarkMonth}\n                            params={newParams}\n                            active={bookmarkMonth === monthParam}\n                            text={bookmarkMonth}\n                          />\n                        )\n                      })}\n                    </div>\n                  </>\n                )\n              }\n            }}\n          </ClientOnly>\n          {/* page tear image */}\n          <img\n            className=\"absolute top-0 -right-[2px] bottom-0 !mt-0 h-screen z-10\"\n            src=\"/page_tear.svg\"\n            alt=\"page tear\"\n          />\n\n          <Footer\n            user={user}\n            className=\"absolute bottom-0 right-0 left-0 px-8 py-4 bg-twitter-dark border-t border-[#375471] border-dashed\"\n          />\n        </section>\n        <section className=\"bg-white w-full bg-[url(/bg_texture.webp)] bg-fixed grow\">\n          <Outlet />\n        </section>\n      </div>\n    </main>\n  )\n}\n\nexport default Bookmarks\n", "import { Form } from '@remix-run/react'\n\ntype UserProps = {\n  user: {\n    profile_image_url: string\n    username: string\n    name: string\n  }\n  className: string\n}\n\nexport const Footer = ({ user, className }: UserProps) => (\n  <div className={`flex space-x-2 items-center ${className}`}>\n    <img\n      className=\"rounded-full w-10 h-10 bg-gray-200\"\n      src={user.profile_image_url}\n      alt=\"avatar\"\n    />\n    <div className=\"flex flex-col text-white\">\n      <p className=\"text-xs\">\n        @{user.username} ({user.name})\n      </p>\n      <Form className=\"leading-none\" action=\"/logout\" method=\"post\">\n        <button\n          className=\"text-zinc-300 text-xs underline\"\n          name=\"logout\"\n          aria-label=\"logout\"\n        >\n          Logout\n        </button>\n      </Form>\n    </div>\n  </div>\n)\n", "import { useMatches } from '@remix-run/react'\nimport { useMemo } from 'react'\nimport type { AllBookmarks } from '~/routes/bookmarks'\n\nexport const useMatchesData = (\n  id: string\n): Record<string, unknown> | undefined => {\n  const matchingRoutes = useMatches()\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  )\n  return route?.data\n}\n\nexport const updateSearchParams = (\n  search: string,\n  key: string,\n  value?: string\n): string => {\n  const searchParams = new URLSearchParams(search)\n\n  // if there is no value supplied remove the param\n  if (!value) {\n    searchParams.delete(key)\n    // if there is a value supplied set it\n  } else {\n    searchParams.set(key, value)\n  }\n\n  // return the string of params\n  return searchParams.toString()\n}\n\nexport const mediaLookup = (mediaId: string, mediaList: any) =>\n  mediaList.find((media: { media_key: string }) => media.media_key === mediaId)\n\nexport const userLookup = (\n  userId: string,\n  users: {\n    id?: string\n    name: string\n    username: string\n    user: string\n    verified: Boolean\n    profile_image_url: string\n  }[]\n) => users.find((user) => user.id === userId)\n\nexport const getPopularUsers = (allBookmarks: AllBookmarks) => {\n  // count the occurance of each username\n  const usernames = allBookmarks.data.reduce(\n    (acc: { [key: string]: any }, tweet) => {\n      // get the username\n      const user = userLookup(tweet.author_id, allBookmarks.includes.users)\n\n      if (!user) return acc\n      // create the username or increase the count\n      return {\n        ...acc,\n        [user.username]: (acc[user.username] || 0) + 1,\n      }\n    },\n    {}\n  )\n\n  // sort by the most popular\n  let mostPopular = Object.keys(usernames).sort(function (a, b) {\n    return -(usernames[a] - usernames[b])\n  })\n\n  return mostPopular\n}\n\nexport const getBookmarkYears = (allBookmarks: AllBookmarks) => {\n  // use a set to remove all duplicates\n  const bookmarkYears = new Set()\n  // loop through the bookmarks and add the year\n  for (const bookmark of allBookmarks.data) {\n    bookmarkYears.add(new Date(bookmark.created_at).getFullYear())\n  }\n  // return an array so we get no surprises\n  return Array.from(bookmarkYears) as string[]\n}\n\nexport const getBookmarkMonths = (bookmarks: AllBookmarks | null) => {\n  const bookmarkMonths = new Set()\n\n  if (!bookmarks) return null\n\n  for (const bookmark of bookmarks.data) {\n    bookmarkMonths.add(\n      new Date(bookmark.created_at).toLocaleString('default', {\n        month: 'long',\n      })\n    )\n  }\n\n  return Array.from(bookmarkMonths) as string[]\n}\n\ntype Queries = {\n  queryValue: string | null\n  yearQuery?: string | null\n}\n\nexport const getFilteredBookmarks = (\n  allBookmarks: AllBookmarks,\n  queries: Queries\n) => {\n  return allBookmarks?.data.filter((tweet: any) => {\n    if (queries.yearQuery) {\n      if (\n        new Date(tweet.created_at).getFullYear().toString() !==\n        queries.yearQuery\n      )\n        return false\n    }\n\n    const annotations =\n      tweet.context_annotations?.map(\n        ({ entity }: { entity: { name: string } }) => entity.name\n      ) ?? []\n    const twitterUser = userLookup(tweet.author_id, allBookmarks.includes.users)\n    const result = [\n      tweet.text,\n      twitterUser?.name,\n      twitterUser?.username,\n      ...annotations,\n    ].find((token) =>\n      token.toLowerCase().match(queries.queryValue?.toLowerCase())\n    )\n\n    if (result) {\n      return tweet\n    }\n\n    return false\n  })\n}\n", "export const Logo = ({ className }: { className?: string }) => {\n  return (\n    <svg\n      className={className}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"138\"\n      height=\"32\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M31.524 6.583c-1.113.493-2.31.826-3.567.977a6.228 6.228 0 002.73-3.437 12.4 12.4 0 01-3.943 1.506A6.212 6.212 0 0016 9.882c0 .486.056.958.16 1.414a17.638 17.638 0 01-12.803-6.49 6.208 6.208 0 00-.84 3.122 6.212 6.212 0 002.763 5.17 6.197 6.197 0 01-2.813-.777v.08c0 3.01 2.14 5.52 4.982 6.091a6.258 6.258 0 01-2.805.107 6.215 6.215 0 005.803 4.312 12.465 12.465 0 01-7.715 2.66c-.501 0-.996-.03-1.483-.087a17.566 17.566 0 009.52 2.79c11.427 0 17.674-9.463 17.674-17.671 0-.267-.007-.536-.02-.803a12.627 12.627 0 003.098-3.213l.003-.004zM40 22.45V9.359h5.242c.963 0 1.766.142 2.41.428.643.285 1.126.682 1.45 1.189.324.503.486 1.082.486 1.738 0 .512-.102.961-.307 1.35a2.648 2.648 0 01-.843.945 3.459 3.459 0 01-1.215.518v.128c.499.021.965.162 1.4.422.439.26.795.624 1.067 1.093.273.464.41 1.018.41 1.662 0 .694-.173 1.314-.518 1.86-.341.541-.846.97-1.515 1.285-.67.315-1.494.473-2.474.473H40zm2.768-2.263h2.256c.771 0 1.334-.147 1.688-.441.353-.298.53-.695.53-1.19 0-.361-.087-.681-.262-.958a1.78 1.78 0 00-.748-.652c-.32-.158-.7-.237-1.144-.237h-2.32v3.478zm0-5.35h2.052c.379 0 .715-.066 1.01-.198.298-.137.532-.329.703-.576a1.5 1.5 0 00.262-.888c0-.473-.169-.855-.505-1.145-.333-.29-.806-.434-1.42-.434h-2.102v3.24zm13.517 7.804c-.993 0-1.851-.21-2.576-.632a4.33 4.33 0 01-1.668-1.777c-.392-.763-.588-1.648-.588-2.653 0-1.014.196-1.9.588-2.66a4.28 4.28 0 011.668-1.776c.725-.426 1.583-.64 2.576-.64.993 0 1.85.214 2.57.64a4.267 4.267 0 011.675 1.777c.392.758.588 1.645.588 2.659 0 1.005-.196 1.89-.588 2.652a4.317 4.317 0 01-1.675 1.777c-.72.422-1.577.633-2.57.633zm.013-2.109c.452 0 .829-.128 1.131-.384.303-.26.531-.613.684-1.06.158-.448.237-.957.237-1.528 0-.571-.079-1.08-.236-1.528-.154-.447-.382-.801-.684-1.061-.303-.26-.68-.39-1.132-.39-.456 0-.84.13-1.15.39-.307.26-.54.614-.697 1.061-.154.447-.23.957-.23 1.528 0 .57.076 1.08.23 1.527.157.448.39.802.697 1.061.31.256.694.384 1.15.384zm11.026 2.109c-.992 0-1.851-.21-2.576-.632a4.33 4.33 0 01-1.668-1.777c-.392-.763-.588-1.648-.588-2.653 0-1.014.196-1.9.588-2.66a4.278 4.278 0 011.668-1.776c.725-.426 1.584-.64 2.576-.64.993 0 1.85.214 2.57.64a4.266 4.266 0 011.675 1.777c.392.758.588 1.645.588 2.659 0 1.005-.196 1.89-.588 2.652a4.317 4.317 0 01-1.675 1.777c-.72.422-1.577.633-2.57.633zm.013-2.109c.452 0 .829-.128 1.132-.384.302-.26.53-.613.684-1.06.157-.448.236-.957.236-1.528a4.58 4.58 0 00-.236-1.528c-.154-.447-.382-.801-.684-1.061-.303-.26-.68-.39-1.132-.39-.456 0-.84.13-1.15.39-.307.26-.54.614-.697 1.061a4.71 4.71 0 00-.23 1.528c0 .57.076 1.08.23 1.527.157.448.39.802.697 1.061.31.256.694.384 1.15.384zm9.058-.908l.006-3.266h.396l3.145-3.727h3.126l-4.225 4.935h-.646l-1.802 2.058zm-2.468 2.826V9.359h2.723v13.09h-2.723zm6.137 0l-2.89-4.277 1.816-1.924 4.263 6.2h-3.19zm4.34 0v-9.82h2.595v1.733h.115a2.724 2.724 0 011.023-1.362c.477-.332 1.048-.498 1.713-.498.673 0 1.246.168 1.72.505.472.332.788.784.945 1.355h.103c.2-.563.562-1.012 1.086-1.35.529-.34 1.153-.51 1.873-.51.916 0 1.66.292 2.231.875.575.58.863 1.402.863 2.468v6.603h-2.717v-6.066c0-.546-.144-.955-.434-1.228-.29-.273-.652-.409-1.087-.409-.494 0-.88.158-1.157.473-.277.311-.415.723-.415 1.234v5.996h-2.64v-6.124c0-.482-.139-.865-.416-1.15-.273-.286-.633-.429-1.08-.429a1.5 1.5 0 00-.818.23 1.58 1.58 0 00-.57.633c-.14.269-.21.584-.21.946v5.894h-2.723zm19.218.185c-.627 0-1.185-.109-1.675-.326a2.693 2.693 0 01-1.163-.978c-.282-.435-.422-.976-.422-1.624 0-.545.1-1.003.3-1.374.2-.37.473-.669.818-.895a3.976 3.976 0 011.176-.511 8.97 8.97 0 011.394-.243 36.46 36.46 0 001.381-.166c.349-.056.603-.137.76-.243a.534.534 0 00.237-.473v-.038c0-.405-.128-.718-.384-.94-.251-.222-.609-.332-1.074-.332-.49 0-.88.108-1.169.325a1.5 1.5 0 00-.576.806l-2.518-.205a3.423 3.423 0 01.754-1.546 3.622 3.622 0 011.451-1.01c.597-.24 1.287-.358 2.071-.358.546 0 1.068.064 1.566.191.503.128.948.326 1.336.595.392.268.701.613.927 1.035.226.418.339.919.339 1.502v6.623h-2.583v-1.362h-.076a2.781 2.781 0 01-.633.812c-.264.23-.582.411-.953.543-.37.128-.799.192-1.284.192zm.779-1.88c.401 0 .755-.078 1.062-.236.306-.162.547-.38.722-.652a1.68 1.68 0 00.262-.927v-1.042a1.462 1.462 0 01-.352.154 6.431 6.431 0 01-.492.121c-.183.034-.366.066-.55.096l-.498.07a3.37 3.37 0 00-.837.224 1.35 1.35 0 00-.557.416 1.01 1.01 0 00-.198.639c0 .37.134.654.403.85.273.192.618.288 1.035.288zm6.862 1.695v-9.82h2.64v1.713h.103c.178-.609.479-1.07.901-1.38a2.367 2.367 0 011.457-.473 4.11 4.11 0 01.857.096v2.416a3.57 3.57 0 00-.531-.102 4.75 4.75 0 00-.62-.045c-.4 0-.758.087-1.074.262-.311.17-.558.409-.741.716-.179.307-.269.66-.269 1.06v5.556h-2.723zm9.833-2.826l.006-3.266h.397l3.144-3.727h3.126l-4.225 4.935h-.646l-1.802 2.058zm-2.467 2.826V9.359h2.723v13.09h-2.723zm6.136 0l-2.889-4.277 1.815-1.924 4.264 6.2h-3.19zm12.509-7.019l-2.493.154a1.28 1.28 0 00-.275-.576 1.454 1.454 0 00-.556-.415 1.888 1.888 0 00-.812-.16c-.421 0-.777.09-1.067.268-.29.175-.435.41-.435.704 0 .234.094.432.282.594.187.162.509.292.965.39l1.777.358c.954.196 1.666.511 2.135.946.468.435.703 1.006.703 1.713 0 .643-.19 1.208-.569 1.694-.375.486-.891.865-1.547 1.138-.652.268-1.404.402-2.256.402-1.3 0-2.336-.27-3.107-.811-.767-.546-1.216-1.287-1.349-2.225l2.679-.14c.081.396.277.698.588.907.311.205.709.307 1.195.307.477 0 .861-.092 1.151-.275.294-.187.443-.428.447-.722a.752.752 0 00-.313-.607c-.205-.162-.52-.286-.946-.371l-1.7-.339c-.959-.192-1.673-.524-2.142-.997-.464-.473-.696-1.076-.696-1.809 0-.63.17-1.174.511-1.63.345-.456.829-.808 1.451-1.055.626-.247 1.359-.37 2.199-.37 1.24 0 2.216.262 2.927.786.716.524 1.134 1.238 1.253 2.141z\"\n      ></path>\n    </svg>\n  )\n}\n", "import { Link } from '@remix-run/react'\n\ntype FilterButtonProps = {\n  params: string\n  active: Boolean\n  text: string\n}\n\nexport const FilterButton = ({ params, active, text }: FilterButtonProps) => (\n  <Link\n    className={[\n      'border border-white rounded-full px-3 py-1.5 text-xs',\n      active ? 'bg-white text-[#15202B]' : 'text-white',\n    ].join(' ')}\n    to={`/bookmarks?${params}`}\n  >\n    {text}\n  </Link>\n)\n", "import { Form, useLocation } from '@remix-run/react'\nimport { useAtom } from 'jotai'\nimport { Tweet } from '~/components/Tweet'\nimport { allBookmarksAtom, bookmarksAtom } from '../bookmarks'\nimport { ClientOnly } from 'remix-utils'\nimport React, { useEffect } from 'react'\nimport { Select } from '~/components/Select'\nimport { getFilteredBookmarks, mediaLookup, userLookup } from '~/utils/utils'\nimport { Spinner } from '~/components/Spinner'\nimport { Logo } from '~/svg/Logo'\nimport { HamburgerMenuIcon } from '@radix-ui/react-icons'\nimport { Link } from 'react-router-dom'\n\nconst Bookmarks = () => {\n  const [allBookmarks] = useAtom(allBookmarksAtom)\n  const [bookmarks, setBookmarks] = useAtom(bookmarksAtom)\n  const { search } = useLocation()\n  const params = new URLSearchParams(search)\n  let queryValue = params.get('query')\n  let sortQuery = params.get('sort')\n  let yearQuery = params.get('year')\n  let monthQuery = params.get('month')\n\n  useEffect(() => {\n    if (allBookmarks && (queryValue || sortQuery || yearQuery)) {\n      let results = getFilteredBookmarks(allBookmarks, {\n        yearQuery,\n        queryValue,\n      })\n\n      if (params.get('sort') === 'oldest') {\n        results.sort((a, b) => {\n          return (\n            new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n          )\n        })\n      }\n\n      setBookmarks({\n        ...allBookmarks,\n        data: results,\n      })\n    } else {\n      setBookmarks(allBookmarks)\n    }\n  }, [queryValue, sortQuery, yearQuery, allBookmarks])\n\n  const currentParams = params\n  currentParams.delete('query')\n\n  let filteredBookmarks = monthQuery\n    ? bookmarks?.data.filter((tweet) => {\n        let tweetMonth = new Date(tweet.created_at).toLocaleString('default', {\n          month: 'long',\n        })\n        return tweetMonth === monthQuery ? true : false\n      })\n    : bookmarks?.data\n\n  return (\n    <div className=\"space-y-4 pb-16\">\n      <header className=\"sticky top-0 z-10 bg-white sm:pt-8 px-4\">\n        <div className=\"max-w-md mx-auto flex justify-between items-center p-4 sm:hidden\">\n          <Logo className=\"text-twitter-dark\" />\n          <Link to={`/bookmarks?${search}&open=sidebar`}>\n            <HamburgerMenuIcon />\n          </Link>\n        </div>\n        <div className=\"max-w-md mx-auto\">\n          <Form action={`/bookmarks?${currentParams}`}>\n            <input\n              className=\"border border-zinc-800 w-full px-4 py-2.5 rounded-full\"\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Search tweets...\"\n              defaultValue={params.get('query') ?? ('' as string)}\n            />\n          </Form>\n          <div className=\"flex justify-between items-center pt-2\">\n            <ClientOnly>\n              {() => (\n                <div className=\"flex w-full\">\n                  <p className=\"text-xs pl-4 text-zinc-400 font-light pr-1\">\n                    {allBookmarks ? allBookmarks?.data?.length : 0} searchable\n                    bookmarks\n                  </p>\n                  {queryValue && (\n                    <p className=\"text-xs text-zinc-400 font-light\">\n                      | {filteredBookmarks ? filteredBookmarks?.length : 0}{' '}\n                      results\n                    </p>\n                  )}\n                </div>\n              )}\n            </ClientOnly>\n            <Select className=\"ml-auto\" />\n          </div>\n        </div>\n      </header>\n      <section className=\"max-w-md px-4 pb-16 w-full mx-auto flex flex-col items-center space-y-4\">\n        <ClientOnly>\n          {() => {\n            if (allBookmarks && bookmarks) {\n              let currentMonthYear = ''\n              return filteredBookmarks?.map((tweet: any, index: number) => {\n                const user = userLookup(\n                  tweet.author_id,\n                  bookmarks.includes.users\n                )\n\n                const media = mediaLookup(\n                  tweet?.attachments?.media_keys[0],\n                  bookmarks.includes.media\n                )\n\n                // get the month and year of the tweet\n                let tweetMonthYear = new Date(\n                  tweet.created_at\n                ).toLocaleDateString('en-GB', {\n                  month: 'long',\n                  year: 'numeric',\n                })\n\n                if (!user) return null\n\n                let tweetSection = (\n                  <React.Fragment key={tweet.id}>\n                    {tweetMonthYear !== currentMonthYear ? (\n                      <div className=\"flex items-center w-full space-x-4 py-4 first:pt-0\">\n                        <span className=\"w-full border-t border-gray-400 border-dashed shrink\"></span>\n                        <p className=\"shrink-0 text-gray-400 text-xs\">\n                          {tweetMonthYear}\n                        </p>\n                        <span className=\"w-full border-t border-gray-400 border-dashed shrink\"></span>\n                      </div>\n                    ) : (\n                      ''\n                    )}\n                    <Tweet\n                      className=\"bg-white rouded shadow-md\"\n                      name={user.user}\n                      username={user.username}\n                      media={media}\n                      profileImageUrl={user.profile_image_url}\n                      verified={user.verified}\n                      tweetId={tweet.id}\n                      date={tweet.created_at}\n                      text={tweet.text}\n                    />\n                  </React.Fragment>\n                )\n\n                currentMonthYear = tweetMonthYear\n\n                return tweetSection\n              })\n            } else {\n              return (\n                // taken from https://github.com/nickbruun/svg-loaders\n                <Spinner />\n              )\n            }\n          }}\n        </ClientOnly>\n      </section>\n    </div>\n  )\n}\n\nexport default Bookmarks\n", "import React from 'react'\n\nconst TweetWrapper = ({\n  href,\n  children,\n  className,\n}: {\n  href: string | null\n  children: React.ReactNode\n  className: string\n}) => {\n  if (href) {\n    return (\n      <a href={href} className={className}>\n        {children}\n      </a>\n    )\n  } else {\n    return <div className={className}>{children}</div>\n  }\n}\n\ntype TweetProps = {\n  tweetId?: string\n  name: string\n  username: string\n  profileImageUrl: string\n  verified: Boolean\n  media: { type: string; url: string; height: number; width: number }\n  text: string\n  date: Date\n  className?: string\n}\n\nexport const Tweet = ({\n  tweetId,\n  name,\n  username,\n  profileImageUrl,\n  verified,\n  media,\n  text,\n  date,\n  className,\n}: TweetProps) => {\n  return (\n    <TweetWrapper\n      href={\n        tweetId ? `https://twitter.com/${username}/status/${tweetId}` : null\n      }\n      className={[\n        'w-full p-4 pb-5.5 block flex space-x-3 bg-white rounded',\n        className,\n      ].join(' ')}\n    >\n      <div className=\"relative w-8 h-8 rounded-full bg-gray-100 overflow-hidden shrink-0\">\n        <img\n          className=\"absolute top-0 left-0 w-full h-full\"\n          src={profileImageUrl}\n          alt={`${username} profile`}\n        />\n      </div>\n      <div className=\"flex-col space-y-2\">\n        <header className=\"flex space-x-4 items-center pt-1.5\">\n          <div className=\"flex items-center space-x-1 text-sm\">\n            <h2>{name} </h2>\n            {verified && (\n              <img className=\"w-4 h-4 text-red\" src=\"/verified.svg\" alt=\"\" />\n            )}\n            <p>\n              @{username} \u00B7{' '}\n              {/* {new Date(tweet.created_at).toLocaleString()} */}\n              {new Date(date).toLocaleDateString(undefined, {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n              })}\n            </p>\n          </div>\n        </header>\n        {media && media.type === 'photo' && (\n          <div\n            className=\"relative rounded-md overflow-hidden\"\n            style={{\n              paddingTop: `${(media.height / media.width) * 100}%`,\n            }}\n          >\n            <img\n              className=\"absolute top-0 left-0 w-full h-full\"\n              src={media.url}\n              alt=\"tweet media\"\n            />\n          </div>\n        )}\n\n        {media && media.type === 'video' && (\n          <div>\n            <p className=\"text-xs p-2 bg-blue-100 text-blue-600 rounded-sm\">\n              This tweet contains a video but Twitters Bookmark API doesnt\n              currently support grabbing their URL.\n            </p>\n          </div>\n        )}\n        <p>{text}</p>\n      </div>\n    </TweetWrapper>\n  )\n}\n", "import type { LoaderFunction } from '@remix-run/node'\nimport { json, redirect } from '@remix-run/node'\nimport { Link, Outlet, useLoaderData, useLocation } from '@remix-run/react'\nimport { atom, useAtom } from 'jotai'\nimport { atomWithStorage } from 'jotai/utils'\nimport { useEffect, useState } from 'react'\nimport { ClientOnly } from 'remix-utils'\nimport { Footer } from '~/components/Footer'\nimport { getUser, logout } from '~/utils/session.server'\nimport {\n  getBookmarkMonths,\n  getBookmarkYears,\n  getPopularUsers,\n  updateSearchParams,\n} from '~/utils/utils'\nimport { Logo } from '~/svg/Logo'\nimport { FilterButton } from '~/components/FilterButton'\nimport { Cross1Icon } from '@radix-ui/react-icons'\n\nexport type AllBookmarks = {\n  data: {\n    created_at: string\n    author_id: string\n  }[]\n  includes: {\n    users: any[]\n    media: any[]\n  }\n}\n\n// this is the atom we will use to store all of our bookmarks\nexport const allBookmarksAtom = atomWithStorage<AllBookmarks | null>(\n  'allBookmarks',\n  null\n)\n// this atom will store the filtered items\nexport const bookmarksAtom = atom<AllBookmarks | null>(null)\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  try {\n    const user = await getUser(request)\n\n    if (!user) {\n      return redirect('/')\n    }\n\n    // check whether the access token has expired\n    if (new Date(user.expires_at) < new Date()) {\n      return logout(request)\n    }\n\n    return json({\n      user,\n    })\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nconst getAllBookmarks = async (setAllBookmarks: any) => {\n  try {\n    const response = await fetch('/getAllBookmarks')\n    const json = await response.json()\n    setAllBookmarks(json)\n    return\n  } catch (err) {\n    console.log(err)\n  }\n}\n\nconst Bookmarks = () => {\n  const data = useLoaderData()\n  const { user } = data\n  const { search } = useLocation()\n  const params = new URLSearchParams(search)\n\n  const query = params.get('query')\n  const yearParam = params.get('year')\n  const monthParam = params.get('month')\n  const openParam = params.get('open')\n\n  const [allBookmarks, setAllBookmarks] = useAtom<AllBookmarks | null>(\n    allBookmarksAtom\n  )\n  const [bookmarks] = useAtom<AllBookmarks | null>(bookmarksAtom)\n  const [popularUsers, setPopularUsers] = useState<string[] | null>(null)\n  const [bookmarkYears, setBookmarkYears] = useState<string[] | null>(null)\n\n  useEffect(() => {\n    if (!allBookmarks) getAllBookmarks(setAllBookmarks)\n  }, [])\n\n  useEffect(() => {\n    if (allBookmarks) {\n      // get the 10 most popular\n      let mostPopular = getPopularUsers(allBookmarks)\n      let getYears = getBookmarkYears(allBookmarks)\n      setPopularUsers(mostPopular.slice(0, 10))\n      setBookmarkYears(getYears)\n    }\n  }, [allBookmarks])\n\n  return (\n    <main>\n      <div className=\"relative bg-twitter-dark flex\">\n        <section\n          className={`bg-twitter-dark max-w-md w-full fixed z-20 top-0 left-0 bottom-0 space-y-4 bg-[url(/bg_texture.webp)] p-4 sm:p-8 pr-14 sm:pr-14 sm:translate-x-0 sm:relative sm:self-start sm:sticky sm:top-0 sm:max-w-md sm:h-screen transition-transform ${\n            openParam ? 'translate-x-0' : '-translate-x-full'\n          }`}\n        >\n          <div>\n            <div className=\"max-w-md mx-auto flex justify-between items-center h-8 sm:hidden\">\n              <Link\n                to={`/bookmarks?${updateSearchParams(search, 'open')}`}\n                className=\"text-white ml-auto\"\n              >\n                <Cross1Icon />\n              </Link>\n            </div>\n            <Link to=\"/bookmarks\" className=\"pb-4 hidden sm:block\">\n              <Logo className=\"text-white\" />\n            </Link>\n          </div>\n\n          <p className=\"text-white text-sm\">\n            Let's help you find your bookmarks quickly and easily! Use the\n            filters below or freestyle it in the search bar.\n          </p>\n          <div className=\"w-full\">\n            <Link\n              to=\"/bookmarks\"\n              className={[\n                'block text-center w-full border rounded-lg px-4 py-2 text-sm text-[#15202B] ',\n                search\n                  ? 'bg-white border-white'\n                  : 'bg-gray-500 text-gray-300 border-gray-400',\n              ].join(' ')}\n            >\n              Clear Filters\n            </Link>\n          </div>\n          <ClientOnly>\n            {() => {\n              if (popularUsers) {\n                return (\n                  <>\n                    <h3 className=\"text-white\">\n                      Your favourite bookmark authors...\n                    </h3>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {popularUsers.map((username, index) => {\n                        // create the updated query params\n                        let newParams = updateSearchParams(\n                          search,\n                          'query',\n                          username\n                        )\n\n                        newParams = updateSearchParams(newParams, 'month')\n                        newParams = updateSearchParams(newParams, 'year')\n\n                        return (\n                          <FilterButton\n                            key={username}\n                            params={newParams}\n                            active={query === username}\n                            text={`@${username}`}\n                          />\n                        )\n                      })}\n                    </div>\n                  </>\n                )\n              }\n            }}\n          </ClientOnly>\n          <ClientOnly>\n            {() => {\n              if (bookmarkYears) {\n                return (\n                  <>\n                    <h3 className=\"text-white\">Filter by year...</h3>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {bookmarkYears.map((bookmarkYear, index) => {\n                        // create the updated query params\n                        let newParams = updateSearchParams(\n                          search,\n                          'year',\n                          bookmarkYear\n                        )\n\n                        newParams = updateSearchParams(newParams, 'month')\n\n                        return (\n                          <FilterButton\n                            key={bookmarkYear}\n                            params={newParams}\n                            active={bookmarkYear.toString() === yearParam}\n                            text={bookmarkYear}\n                          />\n                        )\n                      })}\n                    </div>\n                  </>\n                )\n              }\n            }}\n          </ClientOnly>\n          <ClientOnly>\n            {() => {\n              if (bookmarkYears && bookmarks) {\n                // get all of the available months\n                const bookmarkMonths = getBookmarkMonths(bookmarks)\n\n                if (!bookmarkMonths || !bookmarkMonths.length) return null\n\n                return (\n                  <>\n                    <h3 className=\"text-white\">\n                      and optionally filter by month...\n                    </h3>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {bookmarkMonths.map((bookmarkMonth, index) => {\n                        // create the updated query params\n                        const newParams = updateSearchParams(\n                          search,\n                          'month',\n                          bookmarkMonth as string\n                        )\n\n                        return (\n                          <FilterButton\n                            key={bookmarkMonth}\n                            params={newParams}\n                            active={bookmarkMonth === monthParam}\n                            text={bookmarkMonth}\n                          />\n                        )\n                      })}\n                    </div>\n                  </>\n                )\n              }\n            }}\n          </ClientOnly>\n          {/* page tear image */}\n          <img\n            className=\"absolute top-0 -right-[2px] bottom-0 !mt-0 h-screen z-10\"\n            src=\"/page_tear.svg\"\n            alt=\"page tear\"\n          />\n\n          <Footer\n            user={user}\n            className=\"absolute bottom-0 right-0 left-0 px-8 py-4 bg-twitter-dark border-t border-[#375471] border-dashed\"\n          />\n        </section>\n        <section className=\"bg-white w-full bg-[url(/bg_texture.webp)] bg-fixed grow\">\n          <Outlet />\n        </section>\n      </div>\n    </main>\n  )\n}\n\nexport default Bookmarks\n", "import { Fragment, useState } from 'react'\nimport { Listbox, Transition } from '@headlessui/react'\nimport { CheckIcon, CaretSortIcon } from '@radix-ui/react-icons'\nimport { useLocation, useSearchParams } from '@remix-run/react'\nimport { updateSearchParams } from '~/utils/utils'\n\ntype sortOptionsType = {\n  sort: string\n}\n\nconst sortOptions: sortOptionsType[] = [{ sort: 'Latest' }, { sort: 'Oldest' }]\n\nexport const Select = ({ className }) => {\n  const [params, setParams] = useSearchParams()\n  const { search } = useLocation()\n\n  let initialIndex = params.get('sort')\n    ? sortOptions.findIndex((p) => p.sort.toLowerCase() === params.get('sort'))\n    : 0\n\n  const [selected, setSelected] = useState(sortOptions[initialIndex])\n\n  const handleChange = (e: sortOptionsType) => {\n    // set which item is selected\n    setSelected(e)\n\n    const newParams = updateSearchParams(\n      search,\n      'sort',\n      e.sort.toLowerCase() === 'latest' ? '' : e.sort.toLowerCase()\n    )\n\n    setParams(newParams)\n  }\n\n  return (\n    <div className={`${className}`}>\n      <Listbox value={selected} onChange={handleChange}>\n        <div className=\"relative\">\n          <Listbox.Button className=\"relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-xs\">\n            <span className=\"block truncate text-sm\">{selected.sort}</span>\n            <span className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2\">\n              <CaretSortIcon\n                className=\"h-5 w-5 text-gray-400\"\n                aria-hidden=\"true\"\n              />\n            </span>\n          </Listbox.Button>\n          <Transition\n            as={Fragment}\n            leave=\"transition ease-in duration-100\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Listbox.Options className=\"absolute right-2.5 mt-1 max-h-60 w-24 overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm\">\n              {sortOptions.map((person, personIdx) => (\n                <Listbox.Option\n                  key={personIdx}\n                  className={({ active }) =>\n                    `relative cursor-default select-none py-2 pl-10 pr-4 ${\n                      active ? 'bg-amber-100 text-amber-900' : 'text-gray-900'\n                    }`\n                  }\n                  value={person}\n                >\n                  {({ selected }) => (\n                    <>\n                      <span\n                        className={`block truncate text-xs ${\n                          selected ? 'font-medium' : 'font-normal'\n                        }`}\n                      >\n                        {person.sort}\n                      </span>\n                      {selected ? (\n                        <span className=\"absolute inset-y-0 left-0 flex items-center pl-3\">\n                          <CheckIcon className=\"h-3 w-3\" aria-hidden=\"true\" />\n                        </span>\n                      ) : null}\n                    </>\n                  )}\n                </Listbox.Option>\n              ))}\n            </Listbox.Options>\n          </Transition>\n        </div>\n      </Listbox>\n    </div>\n  )\n}\n", "export const Spinner = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 2400 2400\"\n    width=\"24\"\n    height=\"24\"\n    className=\"mx-auto\"\n  >\n    <g strokeWidth=\"200\" strokeLinecap=\"round\" stroke=\"#000\" fill=\"none\">\n      <path d=\"M1200 600V100\" />\n      <path opacity=\".5\" d=\"M1200 2300v-500\" />\n      <path opacity=\".917\" d=\"M900 680.4l-250-433\" />\n      <path opacity=\".417\" d=\"M1750 2152.6l-250-433\" />\n      <path opacity=\".833\" d=\"M680.4 900l-433-250\" />\n      <path opacity=\".333\" d=\"M2152.6 1750l-433-250\" />\n      <path opacity=\".75\" d=\"M600 1200H100\" />\n      <path opacity=\".25\" d=\"M2300 1200h-500\" />\n      <path opacity=\".667\" d=\"M680.4 1500l-433 250\" />\n      <path opacity=\".167\" d=\"M2152.6 650l-433 250\" />\n      <path opacity=\".583\" d=\"M900 1719.6l-250 433\" />\n      <path opacity=\".083\" d=\"M1750 247.4l-250 433\" />\n      <animateTransform\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        keyTimes=\"0;0.08333;0.16667;0.25;0.33333;0.41667;0.5;0.58333;0.66667;0.75;0.83333;0.91667\"\n        values=\"0 1199 1199;30 1199 1199;60 1199 1199;90 1199 1199;120 1199 1199;150 1199 1199;180 1199 1199;210 1199 1199;240 1199 1199;270 1199 1199;300 1199 1199;330 1199 1199\"\n        dur=\"0.83333s\"\n        begin=\"0s\"\n        repeatCount=\"indefinite\"\n        calcMode=\"discrete\"\n      />\n    </g>\n  </svg>\n)\n", "import type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { redirect } from '@remix-run/node';\nimport { logout } from '~/utils/session.server';\n\nexport const action: ActionFunction = async ({ request }) => {\n  return logout(request);\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  return logout(request);\n};\n", "import type { LoaderFunction } from '@remix-run/node'\nimport { json } from '@remix-run/node'\nimport { Form, Link, useLoaderData } from '@remix-run/react'\nimport { animate, spring, stagger } from 'motion'\nimport { useEffect } from 'react'\nimport { Tweet } from '~/components/Tweet'\nimport { getUser } from '~/utils/session.server'\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request)\n\n  return json({\n    user,\n  })\n}\n\nexport default function Index() {\n  const { user } = useLoaderData()\n\n  useEffect(() => {\n    // twitter icon\n    animate(\n      '.twitter-icon',\n      { opacity: [0, 1] },\n      {\n        duration: 0.45,\n        easing: 'ease-in',\n      }\n    )\n\n    // title\n    animate(\n      'h1.title',\n      { opacity: [0, 1] },\n      {\n        duration: 0.45,\n        delay: 0.5,\n        easing: 'ease-in',\n      }\n    )\n\n    // subcopy\n    animate(\n      'p.subcopy',\n      { opacity: [0, 1] },\n      {\n        duration: 0.45,\n        delay: 0.75,\n        easing: 'ease-in',\n      }\n    )\n\n    // button\n    animate(\n      '.button-wrapper',\n      { scale: [0.6, 1], opacity: 1 },\n      { delay: 1.25, easing: spring() }\n    )\n  }, [])\n\n  return (\n    <main className=\"relative bg-twitter-dark flex flex-col-reverse md:flex-row md:children:basis-1/2 md:min-h-screen\">\n      <div className=\"flex pt-64 md:pt-0 relative overflow-hidden w-full\">\n        <img\n          className=\"self-end block h-auto\"\n          src=\"/half_tone_img.webp\"\n          alt=\"\"\n        />\n        <img\n          className=\"absolute hidden md:block md:rotate-0 md:top-0 md:bottom-0 md:right-[-2px]\"\n          src=\"/page_tear.svg\"\n          alt=\"\"\n        />\n        <img\n          className=\"absolute -top-[2px] left-0 w-full md:hidden rotate-180\"\n          src=\"/page_tear_h.svg\"\n          alt=\"\"\n        />\n        <img\n          className=\"absolute top-0 left-0 w-full h-full\"\n          src=\"/bg_texture.webp\"\n          alt=\"\"\n        />\n        <Tweet\n          className=\"!w-[90%] max-w-sm absolute top-2/12 md:top-1/8 left-1/2 md:left-[calc(50%-24px)] -translate-x-1/2\"\n          name=\"Mountain Dave\"\n          username=\"mountaindave\"\n          media={false}\n          profileImageUrl={'/avatar.jpg'}\n          verified={true}\n          date={new Date()}\n          text=\"Beautiful scenes up here near Unsplash mountain, taking a deep breathe and relishing the moment.\"\n        />\n      </div>\n      <div\n        className=\"py-16 md:py-0 relative bg-white md:self-stretch flex flex-col items-center justify-center space-y-3 bg-cover\"\n        style={{ backgroundImage: \"url('/bg_texture.webp')\" }}\n      >\n        <div className=\"twitter-icon opacity-0\">\n          <svg\n            width=\"133\"\n            height=\"133\"\n            viewBox=\"0 0 133 133\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M130.536 27.6535C125.944 29.6885 121.011 31.0635 115.824 31.685C121.115 28.517 125.174 23.49 127.088 17.506C122.138 20.443 116.655 22.577 110.819 23.721C106.144 18.749 99.489 15.636 92.119 15.636C77.973 15.636 66.5 27.109 66.5 41.266C66.5 43.268 66.731 45.215 67.16 47.096C45.8585 46.0235 26.988 35.821 14.349 20.322C12.149 24.117 10.884 28.517 10.884 33.203C10.884 42.091 15.4105 49.9395 22.28 54.532C18.078 54.3945 14.129 53.245 10.675 51.3255V51.6555C10.675 64.069 19.5025 74.4255 31.2285 76.7795C29.0725 77.3625 26.812 77.6705 24.48 77.6705C22.83 77.6705 21.2185 77.5165 19.6565 77.2195C22.918 87.3945 32.378 94.8085 43.5925 95.0065C34.82 101.882 23.7705 105.979 11.7695 105.979C9.7015 105.979 7.661 105.858 5.6535 105.622C16.9945 112.898 30.4585 117.133 44.9235 117.133C92.0585 117.133 117.826 78.094 117.826 44.236C117.826 43.136 117.799 42.025 117.749 40.925C122.754 37.306 127.099 32.8015 130.526 27.67L130.536 27.6535Z\"\n              fill=\"#1D9BF0\"\n            />\n          </svg>\n        </div>\n        <h1 className=\"title opacity-0 text-3xl font-semibold\">\n          Twitter Bookmarks\n        </h1>\n        <p className=\"subcopy opacity-0 text-lg text-center\">\n          The easiest way to find and search\n          <br />\n          bookmarks you\u2019ve saved\n        </p>\n        <div className=\"button-wrapper pt-4 opacity-0\">\n          {user && new Date(user.expires_at) > new Date() ? (\n            <Link to=\"/bookmarks\">\n              <button className=\"rounded-full bg-[#1d9bf0] text-white py-3 px-6 hover:bg-[#1a8cd8]\">\n                Go to your bookmarks\n              </button>\n            </Link>\n          ) : (\n            <Form method=\"post\" action=\"/login\">\n              <button\n                className=\"rounded-full bg-[#1d9bf0] text-white py-3 px-6 hover:bg-[#1a8cd8]\"\n                name=\"action\"\n                value=\"login\"\n              >\n                Login\n              </button>\n            </Form>\n          )}\n        </div>\n      </div>\n    </main>\n  )\n}\n", "import { redirect } from '@remix-run/server-runtime';\nimport type { ActionFunction } from '@remix-run/server-runtime';\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const action = formData.get('action');\n\n  if (action === 'login') {\n    return redirect(\n      `https://twitter.com/i/oauth2/authorize?response_type=code&client_id=${process.env.TWITTER_CLIENT_ID}&redirect_uri=${process.env.TWITTER_REDIRECT_URI}&scope=tweet.read%20users.read%20bookmark.read%20follows.read%20offline.access&state=state&code_challenge=challenge&code_challenge_method=plain`\n    );\n  }\n};\n", "export default {'version':'1c8aea58','entry':{'module':'/build/entry.client-FFVBWSVX.js','imports':['/build/_shared/chunk-77TZYQQK.js','/build/_shared/chunk-6BO74FWO.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-MDUSDRKH.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/bookmarks':{'id':'routes/bookmarks','parentId':'root','path':'bookmarks','index':undefined,'caseSensitive':undefined,'module':'/build/routes/bookmarks-EQIZ52Z7.js','imports':['/build/_shared/chunk-XLL246KC.js','/build/_shared/chunk-GK56CZJG.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/bookmarks/index':{'id':'routes/bookmarks/index','parentId':'routes/bookmarks','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/bookmarks/index-U4RGMA33.js','imports':['/build/_shared/chunk-MGR6B7YU.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/getAllBookmarks':{'id':'routes/getAllBookmarks','parentId':'root','path':'getAllBookmarks','index':undefined,'caseSensitive':undefined,'module':'/build/routes/getAllBookmarks-6QSMEIVH.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-B6LL63HO.js','imports':['/build/_shared/chunk-MGR6B7YU.js','/build/_shared/chunk-GK56CZJG.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-PJXYFPD5.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login.callback':{'id':'routes/login.callback','parentId':'root','path':'login/callback','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login.callback-OFIMSWSN.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-KNUK42I3.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-1C8AEA58.js'};", "\nimport * as entryServer from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/entry.server.tsx\";\nimport * as route0 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/root.tsx\";\nimport * as route1 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/getAllBookmarks.tsx\";\nimport * as route2 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/login.callback.tsx\";\nimport * as route3 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/bookmarks.tsx\";\nimport * as route4 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/bookmarks/index.tsx\";\nimport * as route5 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/logout.tsx\";\nimport * as route6 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/index.tsx\";\nimport * as route7 from \"/Users/adam.collier/Desktop/remix-twitter-bookmarks/app/routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/getAllBookmarks\": {\n      id: \"routes/getAllBookmarks\",\n      parentId: \"root\",\n      path: \"getAllBookmarks\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/login.callback\": {\n      id: \"routes/login.callback\",\n      parentId: \"root\",\n      path: \"login/callback\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/bookmarks\": {\n      id: \"routes/bookmarks\",\n      parentId: \"root\",\n      path: \"bookmarks\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/bookmarks/index\": {\n      id: \"routes/bookmarks/index\",\n      parentId: \"routes/bookmarks\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    }\n  };"],
  "mappings": "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",
  "names": []
}
